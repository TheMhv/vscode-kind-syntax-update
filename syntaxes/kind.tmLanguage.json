{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name" : "kind",
		"patterns" : [
	{
		"include" : "#main"
	}
	],
	"scopeName" : "source.kind",
	"uuid" : "",
	"repository" : {
	"main" : {
		"patterns" : [
		{
			"include" : "#keyword"
		},
		{
			"include" : "#punctuations"
		},
		{
			"include" : "#value"
		},
		{
			"include" : "#numeric"
		},
		{
			"match" : "(\\blet\\s|\\bdup\\s|\\bcpy\\s|\\bget\\s)",
			"name" : "storage.type.kind"
		},
		{
			"begin" : "(\\)",
			"beginCaptures" : {
			"1" : {
				"name" : "string.kind"
			}
			},
			"contentName" : "string.kind",
			"end" : "(\\)",
			"endCaptures" : {
			"1" : {
				"name" : "string.kind"
			}
			}
		},
		{
			"match" : "((\\s*|\\t*)//.*)",
			"name" : "comment.line.double-slash.kind"
		}
		]
	},
	"keyword" : {
		"patterns" : [
		{
			"match" : "(\\btype\\s|\\blet\\s|\\bdef\\s)",
			"name" : "keyword.other.kind"
		},
		{
			"match" : "(\\bopen\\s)",
			"name" : "keyword.control.auxiliar.kind"
		},
		{
			"match" : "(\\bsucc\\b|\\brefl\\b|\\bzero\\b|\\bcomm\\b|\\bbind\\b|\\bpure\\b|\\bnil\\b|\\bpred\\b|\\badd\\b|\\bcons\\b|\\bnew\\b|\\bhead\\b|\\btail\\b|\\bfst\\b|\\bsnd\\b|\\bsize\\b|\\bapply\\b|\\bkay\\b|\\bmap\\b|\\bsum\\b|\\bdefault\\b|\\b_\\b|\\bsome\\b|\\bnone\\b|\\bconcat\\b|\\brewrite\\b|\\sub\\b|\\bmul\\b|\\bdiv\\b|\\bltn\\b|\\blte\\b|\\beql\\b|\\bgte\\b|\\band\\b|\\bor\\b|\\bvalue\\b|\\bobj\\b)",
			"name" : "keyword.auxiliar.kind"
		},
		{
			"match" : "(\\bif\\s|\\bthen\\b|\\belse\\b|\\bcase\\b|for\\s|\\sin\\s|\\with\\s)",
			"name" : "keyword.conditional.kind"
		}
		]
	},
	"numeric" : {
		"patterns" : [
		{
			"match" : "(\\b[01]+\\b)",
			"name" : "constant.numeric.integer.binary.kind"
		},
		{
			"match" : "(^0[0-7]+$)",
			"name" : "constant.numeric.integer.octal.kind"
		},
		{
			"match" : "(^[\\d.]+$)",
			"name" : "constant.numeric.integer.decimal.kind"
		},
		{
			"match" : "(\\b[\\d]?([\\d][u]))",
			"name" : "constant.numeric.integer.u.kind"
		},
		{
			"match" : "(0[a-z\\x\\x{007b}007c\\x{007d}A-Z][0-9a-fA-F]+)",
			"name" : "constant.numeric.integer.hexadecimal.kind"
		},
		{
			"match" : "(\\b[\\x\\x{007b}002b\\x{007d}-]?([0-9]*[.])?[0-9]+)",
			"name" : "constant.numeric.float.kind"
		}
		]
	},
	"punctuations" : {
		"patterns" : [
		{
			"match" : "(#|~|!|\\$|\\?|\\+|%|&|\\*)",
			"name" : "punctuation.definition.variable.kind"
		},
		{
			"match" : "(=|:|=[\\x{003e}]|=>|\\s->\\s|~[\\x{003e}]|,|\\.|<|>|;)",
			"name" : "punctuation.kind"
		},
		{
			"match" : "(\\[|\\]|\\{|\\}|\\(|\\)|\\|)",
			"name" : "punctuation.kind"
		}
		]
	},
	"value" : {
		"patterns" : [
		{
			"match" : "(\\bNat\\b)",
			"name" : "value.numeric.nat.kind"
		},
		{
			"match" : "(\\bU8\\b|\\bU16\\b|\\bU32\\b|\\bU64\\b|\\bU128\\b|\\bU256\\b)",
			"name" : "value.numeric.nat.u.kind"
		},
		{
			"match" : "(\\bF32\\b|\\bF64\\b)",
			"name" : "value.numeric.float.kind"
		},
		{
			"match" : "(\\bList\\b)",
			"name" : "value.polymorphic.list.kind"
		},
		{
			"match" : "(\\bPair\\b)",
			"name" : "value.polymorphic.pair.kind"
		},
		{
			"match" : "(\\bArray\\b)",
			"name" : "value.polymorphic.array.kind"
		},
		{
			"match" : "(\\bI8\\b|\\bI16\\b|\\bI32\\b|\\bI64\\b|\\bI128\\b|\\bI256\\b)",
			"name" : "value.numeric.integer.kind"
		},
		{
			"match": "(\\bBool\\b)",
			"name": "value.boolean.kind"
		},
		{
			"match" : "(\\btrue\\b)",
			"name" : "value.boolean.true.kind"
		},
		{
			"match" : "(\\bfalse\\b)",
			"name" : "value.boolean.false.kind"
		}
		]
	}
}
}